
import React, {useState} from 'react'

import firebase from 'react-native-firebase'
import {Alert} from 'react-native'




export const pushConfig = (navigation) => {
  
  //CHECK FOR PERMISSION
  fireBaseInit()
  checkPermissionNotification()
  // messageListener(navigation)
}


//RECIEVE NOTIFICATION
// export const messageListener = async (nav) => {
//   const [addCall,setAddCall] = useState(true)
//   const navigation = nav

//   const goToCall = (callObj) => {
//     navigation.navigate('VideoCalling', { type: 'join', ...callObj })
//     // return(
//     // <CallReceive 
//     //  show={addCall}
//     //  setVisibility={() => setAddCall(true)}
//     // />
   
//     // )
    
//   }

//   firebase.notifications().onNotification((notification) => {
//     const { title, body } = notification;
//     const type = JSON.parse(notification.data.tag).notificationType
//     if(type == 'Search') {
//       //Do nothing
//     } else {
//       try {
//         console.log("ADDADA", JSON.parse(notification.data.tag));
//           const callObj = JSON.parse(notification.data.tag).data
//           goToCall(callObj)
//       }
//       catch(err){
//         console.log('ERROR', err)
//       }
//     }
   
//     // const callObj = JSON.parse(body).data
//     // goToCall(callObj)
//   });

//   firebase.notifications().onNotificationOpened((notificationOpen) => {
//     console.log("notification open",notificationOpen.notification.data.tag)
//     const { title, body } = notificationOpen.notification;
//     //this.showAlert(title, body);
//     const type = JSON.parse(notificationOpen.notification.data.tag).notificationType
//     if(type == 'Search') {
//       //Do nothing
//     } else {
//       try {
//         console.log("ADDADA", JSON.parse(notificationOpen.notification.data.tag));
//           const callObj = JSON.parse(notificationOpen.notification.data.tag).data
//           goToCall(callObj)
          
//       }
//       catch(err){
//         console.log('ERROR', err)
//       }
//     }
//   });

//   const notificationOpen = await firebase.notifications().getInitialNotification();
//   if (notificationOpen) {
//     const { title, body } = notificationOpen.notification;
//     showAlert(title, body);
//   }

//   this.messageListener = firebase.messaging().onMessage((message) => {
//     console.log(JSON.stringify(message));
//   });
// }

export const showAlert = (title, message) => {
  Alert.alert(
    title,
    message,
    [
      {text: 'OK', onPress: () => console.log('OK Pressed')},
    ],
    {cancelable: false},
  );
}


//INITILIZATION OF FIREBASE FUNCTION
export const fireBaseInit = () => {

    let config = {
      apiKey: 'AIzaSyDNGd6ZlEdTYzbwfMQpc4pfBsRRTD2mocE',
      authDomain: 'rnfirebXXX-XXXX.firebaseapp.com',
      databaseURL: 'https://kuiktok.firebaseio.com',
      projectId: 'kuiktok',
      storageBucket: 'kuiktok.appspot.com',
      messagingSenderId: '396537705316',
      appId: '1:396537705316:ios:6d29823e2188fdaf4e0071'
    };
    firebase.initializeApp(config);
}

export const checkPermissionNotification = async () => {
  firebase.messaging().hasPermission()
  .then(async enabled => {
    console.log("STATUS", enabled);
    
    if (enabled) {
      fireBaseInit()
      // user has permissions
    } else {
      try {
        await firebase.messaging().requestPermission();
        //FIREBASE INIT
        fireBaseInit()
    } catch (error) {
        // User has rejected permissions
    }
    } 
  });
}


//GETING THE GCM TOKEN
export const getToken = async () => {
  return await firebase.messaging().getToken();
}

//SEND LOCAL-NOTIFICATION
export const sendLocalNotification = () => {

// pushConfig()
//PushNotification.localNotificationSchedule({ message: "message", date: new Date(Date.now() + (20 * 1000)) //20 seconds here })
// PushNotification.localNotificationSchedule({
//     // /* Android Only Properties */
//     // id: '0', // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
//     // ticker: "My Notification Ticker", // (optional)
//     // autoCancel: true, // (optional) default: true
//     // largeIcon: "ic_launcher", // (optional) default: "ic_launcher"
//     // smallIcon: "ic_notification", // (optional) default: "ic_notification" with fallback for "ic_launcher"
//     // bigText: "My big text that will be shown when notification is expanded", // (optional) default: "message" prop
//     // subText: "This is a subText", // (optional) default: none
//     // color: "red", // (optional) default: system default
//     // vibrate: true, // (optional) default: true
//     // vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
//     // tag: 'some_tag', // (optional) add tag to message
//     // group: "group", // (optional) add group to message
//     // ongoing: false, // (optional) set whether this is an "ongoing" notification
//     // priority: "high", // (optional) set notification priority, default: high
//     // visibility: "private", // (optional) set notification visibility, default: private
//     // importance: "high", // (optional) set notification importance, default: high

//     // /* iOS only properties */
//     // // alertAction: // (optional) default: view
//     // // category: // (optional) default: null
//     // // userInfo: // (optional) default: null (object containing additional notification data)

//     /* iOS and Android properties */
//     date: new Date(Date.now() + (10 * 1000)),
//     foreground: true,
//     title: "My Notification Title", // (optional)
//     message: "My Notification Message", // (required)
//     playSound: true, // (optional) default: true
//     soundName: 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
//     number: 1, // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
//     //repeatType: 'day', // (optional) Repeating interval. Check 'Repeating Notifications' section for more info.
//     actions: '["Yes", "No"]',  // (Android only) See the doc for notification actions to know more
// });

}